{"version":3,"file":"resolveAsset.js","sourceRoot":"","sources":["../src/resolveAsset.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AACnC,OAAO,UAAU,MAAM,kBAAkB,CAAC;AAE1C,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,YAAY,CAAC,aAAkB;IAC3D,IAAI,IAAI,GAAY,EAAE,CAAC;IACvB,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;QAChC,KAAK,IAAI,IAAI,IAAI,aAAa,EAAE;YAC9B,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAClD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAClB;KACF;SAAM;QACL,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClB;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,KAAqB;IACzD,IAAI,KAAK,YAAY,KAAK,EAAE;QAC1B,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACnB,MAAM,KAAK,CAAC,aAAa,EAAE,CAAC;SAC7B;QACD,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACnB,OAAO,CAAC,GAAG,CACT,wHAAwH,CACzH,CAAC;SACH;QACD,OAAO,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,GAAG,CAAC;KACpC;SAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QACpC,OAAO,KAAK,CAAC;KACd;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { Asset } from 'expo-asset';\nimport AssetUtils from 'expo-asset-utils';\n\nexport default async function resolveAsset(fileReference: any): Promise<Asset[]> {\n  let urls: Asset[] = [];\n  if (Array.isArray(fileReference)) {\n    for (let file of fileReference) {\n      const asset = await AssetUtils.resolveAsync(file);\n      urls.push(asset);\n    }\n  } else {\n    const asset = await AssetUtils.resolveAsync(fileReference);\n    urls.push(asset);\n  }\n  return urls;\n}\n\nexport async function stringFromAsset(asset: Asset | string): Promise<string | null> {\n  if (asset instanceof Asset) {\n    if (!asset.localUri) {\n      await asset.downloadAsync();\n    }\n    if (!asset.localUri) {\n      console.log(\n        \"Error: You tried to download an Expo.Asset and for some reason it didn't cache... Known reasons are: it's an .mtl file\"\n      );\n    }\n    return asset.localUri || asset.uri;\n  } else if (typeof asset === 'string') {\n    return asset;\n  }\n  return null;\n}\n"]}