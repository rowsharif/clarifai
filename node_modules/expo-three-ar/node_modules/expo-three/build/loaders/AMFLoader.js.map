{"version":3,"file":"AMFLoader.js","sourceRoot":"","sources":["../../src/loaders/AMFLoader.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @author tamarintech / https://tamarintech.com\n * @author evan bacon / somewhere online\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * More information about the AMF format: http://amf.wikispaces.com\n *\n * Usage:\n *\tvar loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires jszip\n * TextDecoder polyfill required by some browsers (particularly IE, Edge)\n * No constellation support (yet)!\n *\n */\n\nimport { TextDecoder } from 'text-encoding';\nimport THREE from '../Three';\n// @ts-ignore\nconst {JSZip} = window;\n\nclass AMFLoader {\n  constructor(manager) {\n    // @ts-ignore\n    this.manager =\n    manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  }\n  \n  load = (url, onLoad, onProgress, onError) => {\n    // @ts-ignore\n    const loader = new THREE.FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, text => onLoad(this.parse(text)), onProgress, onError);\n  };\n  \n  parse = data => {\n    function loadDocument(data) {\n      let view = new DataView(data);\n      const magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n      \n      if (magic === 'PK') {\n        let zip = null;\n        let file = null;\n        \n        console.log('THREE.AMFLoader: Loading Zip');\n        \n        try {\n          zip = new JSZip(data);\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log(\n              'THREE.AMFLoader: jszip missing and file is compressed.'\n              );\n              return null;\n            }\n          }\n          \n          // @ts-ignore\n          for (file in zip.files) {\n            // @ts-ignore\n            if (file.toLowerCase().substr(-4) === '.amf') {\n              break;\n            }\n          }\n          console.log(`THREE.AMFLoader: Trying to load file asset: ${file}`);\n        // @ts-ignore\n        view = new DataView(zip.file(file).asArrayBuffer());\n      }\n      \n      const fileText = new TextDecoder('utf-8').decode(view);\n      const xmlData = new DOMParser().parseFromString(\n        fileText,\n        'application/xml'\n        );\n        \n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n          throw new Error(\n            'THREE.AMFLoader: Error loading AMF - no AMF document found.'\n            );\n          }\n          \n          return xmlData;\n        }\n        \n        function loadDocumentScale(node) {\n          let scale = 1.0;\n          let unit = 'millimeter';\n          \n          if (node.documentElement.attributes.unit !== undefined) {\n            unit = node.documentElement.attributes.unit.value.toLowerCase();\n          }\n          \n          const scaleUnits = {\n            millimeter: 1.0,\n            inch: 25.4,\n            feet: 304.8,\n            meter: 1000.0,\n            micron: 0.001,\n          };\n          \n          if (scaleUnits[unit] !== undefined) {\n            scale = scaleUnits[unit];\n          }\n          \n          console.log(`THREE.AMFLoader: Unit scale: ${scale}`);\n          return scale;\n        }\n        \n        function loadMaterials(node) {\n          let matName = 'AMF Material';\n          let matId = node.getAttribute('id').textContent;\n          let color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n          \n          let loadedMaterial = null;\n          \n          for (const i in node.children) {\n            let matChildEl = node.children[i];\n            if (\n              matChildEl.nodeName === 'metadata' &&\n              matChildEl.getAttribute('type') !== undefined\n              ) {\n                if (matChildEl.getAttribute('type').value === 'name') {\n                  // @ts-ignore\n                  matname = matChildEl.textContent;\n                }\n              } else if (matChildEl.nodeName === 'color') {\n                color = loadColor(matChildEl);\n              }\n            }\n            \n            // @ts-ignore\n            loadedMaterial = new THREE.MeshPhongMaterial({\n              flatShading: true,\n              color: new THREE.Color(color.r, color.g, color.b),\n              name: matName,\n            });\n            \n            if (color.a !== 1.0) {\n              // @ts-ignore\n              loadedMaterial.transparent = true;\n              // @ts-ignore\n              loadedMaterial.opacity = color.a;\n            }\n            \n            return { id: matId, material: loadedMaterial };\n          }\n          \n          function loadColor(node) {\n            const color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n            \n            for (const i in node.children) {\n              const matColor = node.children[i];\n              if (matColor.nodeName === 'r') {\n                color.r = matColor.textContent;\n              } else if (matColor.nodeName === 'g') {\n                color.g = matColor.textContent;\n              } else if (matColor.nodeName === 'b') {\n                color.b = matColor.textContent;\n              } else if (matColor.nodeName === 'a') {\n                color.a = matColor.textContent;\n              }\n            }\n            \n            return color;\n          }\n          \n          function loadMeshVolume(node) {\n            const volume = { name: '', triangles: [], materialid: null };\n            \n            if (node.getAttribute('materialid') !== undefined) {\n              // @ts-ignore\n              volume.materialId = node.getAttribute('materialid').nodeValue;\n            }\n            \n            for (let i in node.childNodes) {\n              const currVolumeNode = node.childNodes[i];\n              if (currVolumeNode.nodeName === 'metadata') {\n                if (currVolumeNode.getAttribute('type') !== undefined) {\n                  if (currVolumeNode.getAttribute('type').value === 'name') {\n                    volume.name = currVolumeNode.textContent;\n                  }\n                }\n              } else if (currVolumeNode.nodeName === 'triangle') {\n                const v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n                const v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n                const v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n                \n                // @ts-ignore\n                volume.triangles.push(v1, v2, v3);\n              }\n            }\n            \n            return volume;\n          }\n          \n          function loadMeshVertices(node) {\n            const vertArray = [];\n            const normalArray = [];\n            \n            for (let i in node.childNodes) {\n              const currVerticesNode = node.childNodes[i];\n              if (currVerticesNode.nodeName === 'vertex') {\n                for (let i in currVerticesNode.childNodes) {\n                  const vNode = currVerticesNode.childNodes[i];\n                  if (vNode.nodeName === 'coordinates') {\n                    const x = vNode.getElementsByTagName('x')[0].textContent;\n                    const y = vNode.getElementsByTagName('y')[0].textContent;\n                    const z = vNode.getElementsByTagName('z')[0].textContent;\n                    // @ts-ignore\n                    vertArray.push(x, y, z);\n                  } else if (vNode.nodeName === 'normal') {\n                    const nx = vNode.getElementsByTagName('nx')[0].textContent;\n                    const ny = vNode.getElementsByTagName('ny')[0].textContent;\n                    const nz = vNode.getElementsByTagName('nz')[0].textContent;\n                    // @ts-ignore\n                    normalArray.push(nx, ny, nz);\n                  }\n                }\n              }\n            }\n            \n            return { vertices: vertArray, normals: normalArray };\n          }\n          \n          function loadObject(node) {\n            const objId = node.getAttribute('id');\n            \n            const loadedObject = { name: 'amfobject', meshes: [] };\n            let currColor = null;\n            \n            for (let j = 0; j < node.childNodes.length; j++) {\n              let currObjNode = node.childNodes[j];\n              if (currObjNode.nodeName === 'metadata') {\n                if (currObjNode.getAttribute('type') !== undefined) {\n                  if (currObjNode.getAttribute('type').value === 'name') {\n                    loadedObject.name = currObjNode.textContent;\n                  }\n                }\n              } else if (currObjNode.nodeName === 'color') {\n                // @ts-ignore\n                currColor = loadColor(currObjNode);\n              } else if (currObjNode.nodeName === 'mesh') {\n                const mesh = {\n                  vertices: [],\n                  normals: [],\n                  volumes: [],\n                  color: currColor,\n                };\n                \n                for (let i in currObjNode.childNodes) {\n                  const currMeshNode = currObjNode.childNodes[i];\n                  if (currMeshNode.nodeName === 'vertices') {\n                    const loadedVertices = loadMeshVertices(currMeshNode);\n                    \n                    mesh.normals = mesh.normals.concat(loadedVertices.normals);\n                    mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n                  } else if (currMeshNode.nodeName === 'volume') {\n                    // @ts-ignore\n                    mesh.volumes.push(loadMeshVolume(currMeshNode));\n                  }\n                }\n                // @ts-ignore\n                loadedObject.meshes.push(mesh);\n              }\n              \n              // currObjNode = currObjNode.nextElementSibling;\n            }\n            \n            return { id: objId, obj: loadedObject };\n          }\n          \n          const xmlData = loadDocument(data);\n          let amfName = '';\n          let amfAuthor = '';\n          const amfScale = loadDocumentScale(xmlData);\n          const amfMaterials = {};\n          const amfObjects = {};\n          // @ts-ignore\n          const children = xmlData.documentElement.childNodes;\n          \n          let i;\n          let j;\n          \n          for (i = 0; i < children.length; i++) {\n            const child = children[i];\n            \n            if (child.nodeName === 'metadata') {\n              // @ts-ignore\n              if (child.getAttribute('type') !== undefined) {\n                // @ts-ignore\n                if (child.getAttribute('type').value === 'name') {\n                  // @ts-ignore\n                  amfName = child.textContent;\n                  // @ts-ignore\n                } else if (child.getAttribute('type').value === 'author') {\n                  // @ts-ignore\n                  amfAuthor = child.textContent;\n                }\n              }\n            } else if (child.nodeName === 'material') {\n              const loadedMaterial = loadMaterials(child);\n              \n              amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n            } else if (child.nodeName === 'object') {\n              const loadedObject = loadObject(child);\n              \n              amfObjects[loadedObject.id] = loadedObject.obj;\n            }\n          }\n          \n          const sceneObject = new THREE.Group();\n          const defaultMaterial = new THREE.MeshPhongMaterial({\n            color: 0xaaaaff,\n            flatShading: true,\n          });\n          \n          sceneObject.name = amfName;\n          sceneObject.userData.author = amfAuthor;\n          sceneObject.userData.loader = 'AMF';\n          \n          for (const id in amfObjects) {\n            const part = amfObjects[id];\n            const meshes = part.meshes;\n            const newObject = new THREE.Group();\n            newObject.name = part.name || '';\n            \n            for (i = 0; i < meshes.length; i++) {\n              let objDefaultMaterial = defaultMaterial;\n              const mesh = meshes[i];\n              const vertices = new THREE.Float32BufferAttribute(mesh.vertices, 3);\n              let normals = null;\n              \n              if (mesh.normals.length) {\n                // @ts-ignore\n                normals = new THREE.Float32BufferAttribute(mesh.normals, 3);\n              }\n              \n              if (mesh.color) {\n                const color = mesh.color;\n                \n                objDefaultMaterial = defaultMaterial.clone();\n                objDefaultMaterial.color = new THREE.Color(color.r, color.g, color.b);\n                \n                if (color.a !== 1.0) {\n                  objDefaultMaterial.transparent = true;\n                  objDefaultMaterial.opacity = color.a;\n                }\n              }\n              \n              const volumes = mesh.volumes;\n              \n              for (j = 0; j < volumes.length; j++) {\n                const volume = volumes[j];\n                const newGeometry = new THREE.BufferGeometry();\n                let material = objDefaultMaterial;\n                \n                newGeometry.setIndex(volume.triangles);\n                newGeometry.addAttribute('position', vertices.clone());\n                \n                if (normals) {\n                  // @ts-ignore\n                  newGeometry.addAttribute('normal', normals.clone());\n                }\n                \n                if (amfMaterials[volume.materialId] !== undefined) {\n                  material = amfMaterials[volume.materialId];\n                }\n                \n                newGeometry.scale(amfScale, amfScale, amfScale);\n                newObject.add(new THREE.Mesh(newGeometry, material.clone()));\n              }\n            }\n            \n            sceneObject.add(newObject);\n          }\n          \n          return sceneObject;\n        };\n      }\n      \n      // @ts-ignore\n      THREE.AMFLoader = AMFLoader;\n      \n      "]}