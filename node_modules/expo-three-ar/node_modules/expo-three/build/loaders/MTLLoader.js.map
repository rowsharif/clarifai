{"version":3,"file":"MTLLoader.js","sourceRoot":"","sources":["../../src/loaders/MTLLoader.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\n\nimport THREE from '../Three';\n\n// @ts-ignore\nTHREE.MTLLoader = function(manager) {\n  // @ts-ignore\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\n// @ts-ignore\nTHREE.MTLLoader.prototype = {\n  // @ts-ignore\n  constructor: THREE.MTLLoader,\n\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setTexturePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setPath and/or setTexturePath explicitly prior to load.\n   */\n  load: function(url, onLoad, onProgress, onError) {\n    var scope = this;\n\n    var loader = new THREE.FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.load(\n      url,\n      function(text) {\n        // @ts-ignore\n        onLoad(scope.parse(text));\n      },\n      onProgress,\n      onError,\n    );\n  },\n\n  /**\n   * Set base path for resolving references.\n   * If set this path will be prepended to each loaded and found reference.\n   *\n   * @see setTexturePath\n   * @param {String} path\n   *\n   * @example\n   *     mtlLoader.setPath( 'assets/obj/' );\n   *     mtlLoader.load( 'my.mtl', ... );\n   */\n  setPath: function(path) {\n    this.path = path;\n  },\n\n  /**\n   * Set base path for resolving texture references.\n   * If set this path will be prepended found texture reference.\n   * If not set and setPath is, it will be used as texture base path.\n   *\n   * @see setPath\n   * @param {String} path\n   *\n   * @example\n   *     mtlLoader.setPath( 'assets/obj/' );\n   *     mtlLoader.setTexturePath( 'assets/textures/' );\n   *     mtlLoader.load( 'my.mtl', ... );\n   */\n  setTexturePath: function(path) {\n    this.texturePath = path;\n  },\n\n  setBaseUrl: function(path) {\n    console.warn(\n      'THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.',\n    );\n\n    this.setTexturePath(path);\n  },\n\n  setCrossOrigin: function(value) {\n    this.crossOrigin = value;\n  },\n\n  setMaterialOptions: function(value) {\n    this.materialOptions = value;\n  },\n\n  /**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {THREE.MTLLoader.MaterialCreator}\n   *\n   * @see setPath setTexturePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setPath and/or setTexturePath explicitly prior to parse.\n   */\n  parse: function(text) {\n    var lines = text.split('\\n');\n    var info = {};\n    var delimiter_pattern = /\\s+/;\n    var materialsInfo = {};\n\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      line = line.trim();\n\n      if (line.length === 0 || line.charAt(0) === '#') {\n        // Blank line or comment ignore\n        continue;\n      }\n\n      var pos = line.indexOf(' ');\n\n      var key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n\n      var value = pos >= 0 ? line.substring(pos + 1) : '';\n      value = value.trim();\n\n      if (key === 'newmtl') {\n        // New material\n\n        info = { name: value };\n        materialsInfo[value] = info;\n      } else if (info) {\n        if (key === 'ka' || key === 'kd' || key === 'ks') {\n          var ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n\n    // @ts-ignore\n    var materialCreator = new THREE.MTLLoader.MaterialCreator(\n      this.texturePath || this.path,\n      this.materialOptions,\n    );\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  },\n};\n\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\n// @ts-ignore\nTHREE.MTLLoader.MaterialCreator = function(baseUrl, options) {\n  // @ts-ignore\n  this.baseUrl = baseUrl || '';\n  // @ts-ignore\n  this.options = options;\n  // @ts-ignore\n  this.materialsInfo = {};\n  // @ts-ignore\n  this.materials = {};\n  // @ts-ignore\n  this.materialsArray = [];\n  // @ts-ignore\n  this.nameLookup = {};\n\n  // @ts-ignore\n  this.side =\n    // @ts-ignore\n    this.options && this.options.side ? this.options.side : THREE.FrontSide;\n  // @ts-ignore\n  this.wrap =\n    this.options && this.options.wrap\n      ? this.options.wrap\n      : THREE.RepeatWrapping;\n};\n\n// @ts-ignore\nTHREE.MTLLoader.MaterialCreator.prototype = {\n  // @ts-ignore\n  constructor: THREE.MTLLoader.MaterialCreator,\n\n  crossOrigin: 'Anonymous',\n\n  setCrossOrigin: function(value) {\n    this.crossOrigin = value;\n  },\n\n  setManager: function(value) {\n    this.manager = value;\n  },\n\n  setMaterials: function(materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  },\n\n  convert: function(materialsInfo) {\n    if (!this.options) return materialsInfo;\n\n    var converted = {};\n\n    for (var mn in materialsInfo) {\n      // Convert materials info into normalized form based on options\n\n      var mat = materialsInfo[mn];\n\n      var covmat = {};\n\n      converted[mn] = covmat;\n\n      for (var prop in mat) {\n        var save = true;\n        var value = mat[prop];\n        var lprop = prop.toLowerCase();\n\n        switch (lprop) {\n          case 'kd':\n          case 'ka':\n          case 'ks':\n            // Diffuse color (color under white light) using RGB values\n\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                // ignore\n\n                save = false;\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n\n    return converted;\n  },\n\n  preload: function() {\n    for (var mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  },\n\n  getIndex: function(materialName) {\n    return this.nameLookup[materialName];\n  },\n\n  getAsArray: function() {\n    var index = 0;\n\n    for (var mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n\n    return this.materialsArray;\n  },\n\n  create: function(materialName) {\n    if (this.materials[materialName] === undefined) {\n      this.createMaterial_(materialName);\n    }\n\n    return this.materials[materialName];\n  },\n\n  createMaterial_: function(materialName) {\n    // Create material\n\n    var scope = this;\n    var mat = this.materialsInfo[materialName];\n    var params = {\n      name: materialName,\n      side: this.side,\n    };\n\n    function setMapForType(mapType, value) {\n      if (params[mapType]) return; // Keep the first encountered texture\n\n      var texParams = scope.getTextureParams(value, params);\n      var map = scope.loadTexture(scope.baseUrl, texParams.url);\n\n      map.repeat.copy(texParams.scale);\n      map.offset.copy(texParams.offset);\n\n      map.wrapS = scope.wrap;\n      map.wrapT = scope.wrap;\n\n      params[mapType] = map;\n    }\n\n    for (var prop in mat) {\n      var value = mat[prop];\n      var n;\n\n      if (value === '') continue;\n\n      switch (prop.toLowerCase()) {\n        // Ns is material specular exponent\n\n        case 'kd':\n          // Diffuse color (color under white light) using RGB values\n          // @ts-ignore\n          params.color = new THREE.Color().fromArray(value);\n\n          break;\n\n        case 'ks':\n          // Specular color (color when light is reflected from shiny surface) using RGB values\n          // @ts-ignore\n          params.specular = new THREE.Color().fromArray(value);\n\n          break;\n\n        case 'map_kd':\n          // Diffuse texture map\n\n          setMapForType('map', value);\n\n          break;\n\n        case 'map_ks':\n          // Specular map\n\n          setMapForType('specularMap', value);\n\n          break;\n\n        case 'norm':\n          setMapForType('normalMap', value);\n\n          break;\n\n        case 'map_bump':\n        case 'bump':\n          // Bump texture map\n\n          setMapForType('bumpMap', value);\n\n          break;\n\n        case 'ns':\n          // The specular exponent (defines the focus of the specular highlight)\n          // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n          // @ts-ignore\n          params.shininess = parseFloat(value);\n\n          break;\n\n        case 'd':\n          n = parseFloat(value);\n\n          if (n < 1) {\n            // @ts-ignore\n            params.opacity = n;\n            // @ts-ignore\n            params.transparent = true;\n          }\n\n          break;\n\n        case 'tr':\n          n = parseFloat(value);\n\n          if (n > 0) {\n            // @ts-ignore\n            params.opacity = 1 - n;\n            // @ts-ignore\n            params.transparent = true;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.materials[materialName] = new THREE.MeshPhongMaterial(params);\n    return this.materials[materialName];\n  },\n\n  getTextureParams: function(value, matParams) {\n    var texParams = {\n      scale: new THREE.Vector2(1, 1),\n      offset: new THREE.Vector2(0, 0),\n    };\n\n    var items = value.split(/\\s+/);\n    var pos;\n\n    pos = items.indexOf('-bm');\n\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n\n    pos = items.indexOf('-s');\n\n    if (pos >= 0) {\n      texParams.scale.set(\n        parseFloat(items[pos + 1]),\n        parseFloat(items[pos + 2]),\n      );\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    pos = items.indexOf('-o');\n\n    if (pos >= 0) {\n      texParams.offset.set(\n        parseFloat(items[pos + 1]),\n        parseFloat(items[pos + 2]),\n      );\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    // @ts-ignore\n    texParams.url = items.join(' ').trim();\n    return texParams;\n  },\n\n  loadTexture: function(baseUrl, url, mapping, onLoad, onProgress, onError) {\n    var texture;\n    var loader = THREE.Loader.Handlers.get(url);\n    var manager =\n      this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n\n    if (loader === null) {\n      loader = new THREE.TextureLoader(manager);\n      // @ts-ignore\n      loader.setPath(baseUrl);\n    }\n\n    // @ts-ignore\n    if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n    texture = loader.load(url, onLoad, onProgress, onError);\n\n    if (mapping !== undefined) texture.mapping = mapping;\n\n    return texture;\n  },\n};\n"]}