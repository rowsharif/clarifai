{"version":3,"file":"parseAsync.js","sourceRoot":"","sources":["../src/parseAsync.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,SAAS,CAAC;AAE5B,KAAK,UAAU,oBAAoB,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE;IACjE,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAChD,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;AAC3C,CAAC;AASD,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,UAAU,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,aAAa,EAAa;IACjF,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;QAClD,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;KAC7B;IAED,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;KACxE;IAED,QAAQ,MAAM,EAAE;QACd,KAAK,OAAO,CAAC;QACb,KAAK,QAAQ;YACX,OAAO,oBAAoB,CAAC;gBAC1B,IAAI;gBACJ,aAAa;gBACb,MAAM,EAAE,IAAI,KAAK,CAAC,YAAY,EAAE;aACjC,CAAC,CAAC;QACL,KAAK,MAAM,CAAC;QACZ,KAAK,SAAS;YACZ,OAAO,oBAAoB,CAAC;gBAC1B,IAAI;gBACJ,aAAa;gBACb,MAAM,EAAE,IAAI,KAAK,CAAC,UAAU,EAAE;aAC/B,CAAC,CAAC;QACL,KAAK,QAAQ;YACX,OAAO,oBAAoB,CAAC;gBAC1B,IAAI;gBACJ,aAAa;gBACb,MAAM,EAAE,IAAI,KAAK,CAAC,oBAAoB,EAAE;aACzC,CAAC,CAAC;QACL,KAAK,OAAO,CAAC;QACb;YACE,MAAM,IAAI,KAAK,CAAC,yBAAyB,MAAM,iBAAiB,CAAC,CAAC;KACrE;AACH,CAAC","sourcesContent":["import THREE from './Three';\n\nasync function parseWithLoaderAsync({ json, assetProvider, loader }): Promise<any> {\n  loader.setPath && loader.setPath(assetProvider);\n  return loader.parse(json, assetProvider);\n}\n\ntype Parseable = {\n  json: any;\n  format?: string;\n  onProgress?: (...args: any[]) => any;\n  assetProvider: any;\n};\n\nexport default async function parseAsync({ json, format, assetProvider }: Parseable): Promise<any> {\n  if (!format && json.metadata && json.metadata.type) {\n    format = json.metadata.type;\n  }\n\n  if (!format) {\n    throw new Error('ExpoTHREE: parseAsync: Invalid null format provided');\n  }\n\n  switch (format) {\n    case 'clara':\n    case 'object':\n      return parseWithLoaderAsync({\n        json,\n        assetProvider,\n        loader: new THREE.ObjectLoader(),\n      });\n    case 'json':\n    case 'blender':\n      return parseWithLoaderAsync({\n        json,\n        assetProvider,\n        loader: new THREE.JSONLoader(),\n      });\n    case 'buffer':\n      return parseWithLoaderAsync({\n        json,\n        assetProvider,\n        loader: new THREE.BufferGeometryLoader(),\n      });\n    case 'scene':\n    default:\n      throw new Error(`ExpoTHREE.parseAsync: ${format} not supported.`);\n  }\n}\n"]}