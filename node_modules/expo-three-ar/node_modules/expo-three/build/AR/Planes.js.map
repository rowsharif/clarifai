{"version":3,"file":"Planes.js","sourceRoot":"","sources":["../../src/AR/Planes.ts"],"names":[],"mappings":"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","sourcesContent":["import { AR } from 'expo';\nimport { PlaneAnchor } from 'expo/build/AR';\n\nimport THREE from '../Three';\n\n// @ts-ignore\nconst AnchorTypes = AR.AnchorType || AR.AnchorTypes;\n\n// @ts-ignore\nconst ARFrameAttribute = AR.FrameAttribute || AR.FrameAttributes;\n\n//TODO: Evan: Add vertical plane support\nclass Planes extends THREE.Object3D {\n  common = {};\n  _data: PlaneAnchor[] = [];\n  segments = 5;\n  defaultRotationX = -Math.PI * 0.5;\n\n  planeMaterial = new THREE.MeshBasicMaterial({\n    color: 0xffff00,\n    // side: THREE.DoubleSide,\n    wireframe: true,\n  });\n\n  get data() {\n    return this._data;\n  }\n\n  set data(planes: PlaneAnchor[]) {\n    this._data = planes;\n    let nextPlanes = {};\n\n    for (let plane of planes) {\n      const {\n        center,\n        extent: { width, length },\n        transform,\n        id,\n      } = plane;\n      let object = this.common[id];\n      nextPlanes[id] = object;\n      this.common[id] = null;\n\n      if (!object) {\n        const geometry = new THREE.PlaneBufferGeometry(\n          width,\n          length,\n          this.segments,\n          this.segments,\n        );\n        const planeMesh = new THREE.Mesh(geometry, this.planeMaterial);\n        planeMesh.rotation.x = this.defaultRotationX;\n\n        object = new THREE.Object3D();\n        object.planeMesh = planeMesh;\n        object.add(planeMesh);\n\n        nextPlanes[id] = object;\n        this.add(object);\n      } else {\n        object.planeMesh.geometry.width = width;\n        object.planeMesh.geometry.height = length;\n      }\n      object.planeMesh.position.x = center.x;\n      object.planeMesh.position.z = center.z;\n\n      object.matrix.fromArray(transform);\n      object.matrix.decompose(object.position, object.quaternion, object.scale);\n    }\n\n    for (let key in this.common) {\n      this.remove(this.common[key]);\n    }\n    this.common = nextPlanes;\n  }\n\n  update = (): void => {\n    const { anchors } = AR.getCurrentFrame({\n      [ARFrameAttribute.Anchors]: {},\n    });\n    if (anchors) {\n      const planes = anchors.filter(({ type }) => type === AnchorTypes.Plane);\n      this.data = planes as PlaneAnchor[];\n    } else {\n      this.data = [];\n    }\n  };\n}\n\nexport default Planes;\n"]}