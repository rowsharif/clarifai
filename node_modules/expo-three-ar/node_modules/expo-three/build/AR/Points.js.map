{"version":3,"file":"Points.js","sourceRoot":"","sources":["../../src/AR/Points.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,EAAE,EAAE,MAAM,MAAM,CAAC;AAE1B,OAAO,KAAK,MAAM,UAAU,CAAC;AAE7B,aAAa;AACb,MAAM,gBAAgB,GAAG,EAAE,CAAC,cAAc,IAAI,EAAE,CAAC,eAAe,CAAC;AAEjE,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,KAAK,CAAC,QAAQ;IAAlD;;QACE,WAAM,GAAmC,EAAE,CAAC;QAC5C,UAAK,GAAsB,EAAE,CAAC;QAC9B,aAAQ,GAAG,IAAI,KAAK,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC;QA+BzE,WAAM,GAAG,GAAG,EAAE;YACZ,MAAM,EAAE,gBAAgB,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC;gBAC9C,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,IAAI;aAC1C,CAAC,CAAC;YACH,IAAI,gBAAgB,EAAE;gBACpB,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;aAC9B;iBAAM;gBACL,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;aAChB;QACH,CAAC,CAAC;IACJ,CAAC;IAvCC,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAI,IAAI,CAAC,MAAyB;QAChC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QACpB,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE;YACxB,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,KAAK,CAAC;YAC9B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC7B,UAAU,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;YACxB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACvB,IAAI,CAAC,MAAM,EAAE;gBACX,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACtC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACnD,UAAU,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;gBACxB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;aAClB;YACD,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SAC9B;QAED,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC9C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACpB;QACD,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;IAC3B,CAAC;CAYF","sourcesContent":["import { RawFeaturePoint } from 'expo/build/AR';\nimport { AR } from 'expo';\n\nimport THREE from '../Three';\n\n// @ts-ignore\nconst ARFrameAttribute = AR.FrameAttribute || AR.FrameAttributes;\n\nexport default class Points extends THREE.Object3D {\n  common: { [id: string]: THREE.Points } = {};\n  _data: RawFeaturePoint[] = [];\n  material = new THREE.PointsMaterial({ size: 5, sizeAttenuation: false });\n\n  get data() {\n    return this._data;\n  }\n\n  set data(points: RawFeaturePoint[]) {\n    this._data = points;\n    let nextPoints = {};\n\n    for (let point of points) {\n      const { x, y, z, id } = point;\n      let object = this.common[id];\n      nextPoints[id] = object;\n      delete this.common[id];\n      if (!object) {\n        const geometry = new THREE.Geometry();\n        geometry.vertices.push(new THREE.Vector3(0, 0, 0));\n        object = new THREE.Points(geometry, this.material);\n        nextPoints[id] = object;\n        this.add(object);\n      }\n      object.position.set(x, y, z);\n    }\n\n    for (const point of Object.values(this.common)) {\n      this.remove(point);\n    }\n    this.common = nextPoints;\n  }\n\n  update = () => {\n    const { rawFeaturePoints } = AR.getCurrentFrame({\n      [ARFrameAttribute.RawFeaturePoints]: true,\n    });\n    if (rawFeaturePoints) {\n      this.data = rawFeaturePoints;\n    } else {\n      this.data = [];\n    }\n  };\n}\n"]}