{"version":3,"file":"calculations.js","sourceRoot":"","sources":["../../src/AR/calculations.ts"],"names":[],"mappings":"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","sourcesContent":["import { AR } from 'expo';\nimport THREE from '../Three';\nimport ARCamera from './Camera';\n\nexport class HitTestRay {\n  origin?: THREE.Vector3;\n  direction?: THREE.Vector3;\n  constructor(origin: THREE.Vector3, direction: THREE.Vector3) {\n    this.origin = origin;\n    this.direction = direction;\n  }\n}\n\nexport class FeatureHitTestResult {\n  position; //Vector3\n  distanceToRayOrigin;\n  featureHit; //Vector3\n  featureDistanceToHitResult;\n}\n\n/*\n  ExpoTHREE.AR.suppressWarnings()\n  */\nexport function suppressWarnings() {\n  console.log(\n    'Warning: ExpoTHREE.AR.suppressWarnings() is deprecated, use: THREE.suppressExpoWarnings()'\n  );\n}\n\n//-> [FeatureHitTestResult]\nexport function hitTestWithFeatures(\n  camera: ARCamera,\n  point: THREE.Vector2,\n  coneOpeningAngleInDegrees: number,\n  minDistance: number = 0,\n  maxDistance: number = 99999999999999,\n  maxResults: number = 1,\n  rawFeaturePoints: any[] = []\n): FeatureHitTestResult[] {\n  let results: FeatureHitTestResult[] = [];\n\n  let featurePoints = _getRawFeaturePoints(rawFeaturePoints);\n  if (featurePoints.length === 0) {\n    return results;\n  }\n\n  const ray = hitTestRayFromScreenPos(camera, point);\n  if (!ray || !ray.origin || !ray.direction) {\n    return results;\n  }\n\n  const maxAngleInDeg = Math.min(coneOpeningAngleInDegrees, 360) / 2;\n  const maxAngle = (maxAngleInDeg / 180) * Math.PI;\n\n  for (let feature of featurePoints) {\n    const { x, y, z } = feature;\n\n    let featurePos = new THREE.Vector3(x, y, z);\n\n    let originToFeature = featurePos.clone().sub(ray.origin);\n\n    let crossProduct = originToFeature.clone().cross(ray.direction);\n    let featureDistanceFromResult = crossProduct.length();\n\n    const mult = ray.direction.clone().dot(originToFeature);\n    const hitTestResult = ray.origin.clone().add(ray.direction.clone().multiplyScalar(mult));\n\n    const hitTestResultDistance = hitTestResult\n      .clone()\n      .sub(ray.origin)\n      .length();\n\n    if (hitTestResultDistance < minDistance || hitTestResultDistance > maxDistance) {\n      // Skip this feature - it is too close or too far away.\n      continue;\n    }\n\n    const originToFeatureNormalized = originToFeature.clone().normalize();\n    const angleBetweenRayAndFeature = Math.acos(\n      ray.direction.clone().dot(originToFeatureNormalized)\n    );\n\n    if (angleBetweenRayAndFeature > maxAngle) {\n      // Skip this feature - is is outside of the hit test cone.\n      continue;\n    }\n\n    // All tests passed: Add the hit against this feature to the results.\n    const featureHitTestResult = new FeatureHitTestResult();\n    featureHitTestResult.position = hitTestResult;\n    featureHitTestResult.distanceToRayOrigin = hitTestResultDistance;\n    featureHitTestResult.featureHit = featurePos;\n    featureHitTestResult.featureDistanceToHitResult = featureDistanceFromResult;\n\n    results.push(featureHitTestResult);\n  }\n\n  // Sort the results by feature distance to the ray.\n  results = results.sort((first, second) => {\n    if (first.distanceToRayOrigin < second.distanceToRayOrigin) {\n      return 1;\n    } else if (first.distanceToRayOrigin === second.distanceToRayOrigin) {\n      return 0;\n    }\n    return -1;\n  });\n\n  // Cap the list to maxResults.\n  let cappedResults: any[] = [];\n  let i = 0;\n  while (i < maxResults && i < results.length) {\n    cappedResults.push(results[i]);\n    i += 1;\n  }\n\n  return cappedResults;\n}\n\n//-> [FeatureHitTestResult]\nexport function hitTestWithPoint(camera: ARCamera, point: THREE.Vector2): FeatureHitTestResult[] {\n  let results: FeatureHitTestResult[] = [];\n  const ray = hitTestRayFromScreenPos(camera, point);\n  if (!ray || !ray.origin || !ray.direction) {\n    return results;\n  }\n  const result = hitTestFromOrigin(ray.origin, ray.direction);\n  if (result != null) {\n    results.push(result);\n  }\n\n  return results;\n}\n\nexport function unprojectPoint(camera: ARCamera, point: THREE.Vector3): THREE.Vector3 {\n  let vector = point.clone();\n  const widthHalf = camera.width / 2;\n  const heightHalf = camera.height / 2;\n\n  vector.project(camera);\n\n  vector.x = vector.x * widthHalf + widthHalf;\n  vector.y = -(vector.y * heightHalf) + heightHalf;\n  vector.z = 0;\n\n  return vector;\n}\n\nexport function hitTestRayFromScreenPos(camera: ARCamera, point: THREE.Vector2): HitTestRay {\n  const cameraPos = positionFromTransform(camera.matrix);\n\n  // Note: z: 1.0 will unproject() the screen position to the far clipping plane.\n  let positionVec = new THREE.Vector3(point.x, point.y, 1.0);\n  let screenPosOnFarClippingPlane = unprojectPoint(camera, positionVec);\n  screenPosOnFarClippingPlane.sub(cameraPos);\n  screenPosOnFarClippingPlane.normalize();\n  const hitTest = new HitTestRay(cameraPos, screenPosOnFarClippingPlane);\n  return hitTest;\n}\n\n// @ts-ignore\nconst ARFrameAttribute = AR.FrameAttribute || AR.FrameAttributes || {};\n// @ts-ignore\nconst ARHitTestResultType = AR.HitTestResultType || AR.HitTestResultTypes || {};\n\nfunction _getRawFeaturePoints(rawFeaturePoints) {\n  let featurePoints = rawFeaturePoints;\n  if (featurePoints == null) {\n    const currentFrame = AR.getCurrentFrame({ [ARFrameAttribute.RawFeaturePoints]: true }) || {};\n    featurePoints = currentFrame.rawFeaturePoints;\n  }\n  return featurePoints || [];\n}\n\n//-> FeatureHitTestResult?\nexport function hitTestFromOrigin(\n  origin: THREE.Vector3,\n  direction: THREE.Vector3,\n  rawFeaturePoints: any[] = []\n): FeatureHitTestResult | null {\n  let featurePoints = _getRawFeaturePoints(rawFeaturePoints);\n  if (featurePoints.length === 0) {\n    return null;\n  }\n\n  // Determine the point from the whole point cloud which is closest to the hit test ray.\n  var closestFeaturePoint = origin;\n  var minDistance = 99999999999;\n\n  for (let feature of featurePoints) {\n    const { x, y, z, id } = feature;\n    let featurePos = new THREE.Vector3(x, y, z);\n\n    let originVector = origin.clone().sub(featurePos);\n    let crossProduct = originVector.clone().cross(direction);\n    let featureDistanceFromResult = crossProduct.length();\n\n    if (featureDistanceFromResult < minDistance) {\n      closestFeaturePoint = featurePos;\n      minDistance = featureDistanceFromResult;\n    }\n  }\n\n  // Compute the point along the ray that is closest to the selected feature.\n  let originToFeature = closestFeaturePoint.clone().sub(origin);\n  let hitTestResult = origin\n    .clone()\n    .add(direction.clone().multiplyScalar(direction.clone().dot(originToFeature)));\n  let hitTestResultDistance = hitTestResult\n    .clone()\n    .sub(origin)\n    .length();\n\n  let featureHitTestResult = new FeatureHitTestResult();\n\n  featureHitTestResult.position = hitTestResult;\n  featureHitTestResult.distanceToRayOrigin = hitTestResultDistance;\n  featureHitTestResult.featureHit = closestFeaturePoint;\n  featureHitTestResult.featureDistanceToHitResult = minDistance;\n  return featureHitTestResult;\n}\n\nexport function hitTestWithInfiniteHorizontalPlane(\n  camera: ARCamera,\n  point: THREE.Vector2,\n  pointOnPlane: THREE.Vector3\n): THREE.Vector3 | null {\n  const ray = hitTestRayFromScreenPos(camera, point);\n  // Do not intersect with planes above the camera or if the ray is almost parallel to the plane.\n  if (!ray || !ray.direction || ray.direction.y > -0.03) {\n    return null;\n  }\n\n  // Return the intersection of a ray from the camera through the screen position with a horizontal plane\n  // at height (Y axis).\n  return rayIntersectionWithHorizontalPlane(ray.origin, ray.direction, pointOnPlane.y);\n}\n\nexport function rayIntersectionWithHorizontalPlane(\n  rayOrigin: THREE.Vector3 | undefined,\n  direction: THREE.Vector3,\n  planeY: number\n): THREE.Vector3 | null {\n  direction = direction.normalize();\n\n  // Special case handling: Check if the ray is horizontal as well.\n  if (direction.y == 0) {\n    if (rayOrigin && rayOrigin.y == planeY) {\n      // The ray is horizontal and on the plane, thus all points on the ray intersect with the plane.\n      // Therefore we simply return the ray origin.\n      return rayOrigin;\n    } else {\n      // The ray is parallel to the plane and never intersects.\n      return null;\n    }\n  }\n\n  // The distance from the ray's origin to the intersection point on the plane is:\n  //   (pointOnPlane - rayOrigin) dot planeNormal\n  //  --------------------------------------------\n  //          direction dot planeNormal\n  if (rayOrigin) {\n    // Since we know that horizontal planes have normal (0, 1, 0), we can simplify this to:\n    let dist = (planeY - rayOrigin.y) / direction.y;\n\n    // Do not return intersections behind the ray's origin.\n    if (dist < 0) {\n      return null;\n    }\n    // Return the intersection point.\n    direction.multiplyScalar(dist);\n    return rayOrigin.clone().add(direction);\n  }\n  return null;\n}\n\nexport function convertTransformArray(transform: number[]): THREE.Matrix4 {\n  const matrix = new THREE.Matrix4();\n  matrix.fromArray(transform);\n  return matrix;\n}\n\nexport function positionFromTransform(transform: THREE.Matrix4): THREE.Vector3 {\n  const position = new THREE.Vector3();\n  position.setFromMatrixPosition(transform);\n  return position;\n}\n\n//-> (position: SCNVector3?, planeAnchor: ARPlaneAnchor?, hitAPlane: Bool)\n// Code from Apple PlacingObjects demo: https://developer.apple.com/sample-code/wwdc/2017/PlacingObjects.zip\nexport function worldPositionFromScreenPosition(\n  camera: ARCamera,\n  position: THREE.Vector2,\n  objectPos: THREE.Vector3,\n  infinitePlane: boolean = false,\n  dragOnInfinitePlanesEnabled: boolean = false,\n  rawFeaturePoints: any = undefined\n): null | {\n  worldPosition?: THREE.Vector3;\n  planeAnchor: AR.PlaneAnchor | null;\n  hitAPlane: boolean;\n} {\n  // -------------------------------------------------------------------------------\n  // 1. Always do a hit test against exisiting plane anchors first.\n  //    (If any such anchors exist & only within their extents.)\n\n  const results = AR.performHitTest(\n    {\n      x: position.x,\n      y: position.y,\n    },\n    ARHitTestResultType.ExistingPlaneUsingExtent\n  );\n\n  if (results) {\n    const { hitTest } = results;\n\n    if (hitTest.length > 0) {\n      let result = hitTest[0];\n\n      const { worldTransform, anchor } = result;\n      const transform = convertTransformArray(worldTransform);\n      const worldPosition = positionFromTransform(transform);\n      // Return immediately - this is the best possible outcome.\n      return {\n        worldPosition,\n        planeAnchor: anchor as AR.PlaneAnchor,\n        hitAPlane: true,\n      };\n    }\n    return null;\n  }\n\n  // -------------------------------------------------------------------------------\n  // 2. Collect more information about the environment by hit testing against\n  //    the feature point cloud, but do not return the result yet.\n  let featureHitTestPosition = new THREE.Vector3();\n  let highQualityFeatureHitTestResult = false;\n\n  const highQualityfeatureHitTestResults = hitTestWithFeatures(\n    camera,\n    position,\n    18,\n    0.2,\n    2.0,\n    rawFeaturePoints\n  );\n\n  if (highQualityfeatureHitTestResults && highQualityfeatureHitTestResults.length > 0) {\n    const result = highQualityfeatureHitTestResults[0];\n    featureHitTestPosition = result.position;\n    highQualityFeatureHitTestResult = true;\n  }\n\n  // -------------------------------------------------------------------------------\n  // 3. If desired or necessary (no good feature hit test result): Hit test\n  //    against an infinite, horizontal plane (ignoring the real world).\n  if ((infinitePlane && dragOnInfinitePlanesEnabled) || !highQualityFeatureHitTestResult) {\n    let pointOnPlane = objectPos || new THREE.Vector3();\n\n    let pointOnInfinitePlane = hitTestWithInfiniteHorizontalPlane(camera, position, pointOnPlane);\n    if (pointOnInfinitePlane) {\n      return { worldPosition: pointOnInfinitePlane, planeAnchor: null, hitAPlane: true };\n    }\n  }\n\n  // -------------------------------------------------------------------------------\n  // 4. If available, return the result of the hit test against high quality\n  //    features if the hit tests against infinite planes were skipped or no\n  //    infinite plane was hit.\n  if (highQualityFeatureHitTestResult) {\n    return { worldPosition: featureHitTestPosition, planeAnchor: null, hitAPlane: false };\n  }\n\n  // -------------------------------------------------------------------------------\n  // 5. As a last resort, perform a second, unfiltered hit test against features.\n  //    If there are no features in the scene, the result returned here will be nil.\n\n  let unfilteredFeatureHitTestResults = hitTestWithPoint(camera, position);\n  if (unfilteredFeatureHitTestResults.length > 0) {\n    let result = unfilteredFeatureHitTestResults[0];\n    return { worldPosition: result.position, planeAnchor: null, hitAPlane: false };\n  }\n\n  return { planeAnchor: null, hitAPlane: false };\n}\n\nexport function positionFromAnchor({ worldTransform }): THREE.Vector3 {\n  const transform = convertTransformArray(worldTransform);\n  const position = positionFromTransform(transform);\n  return position;\n}\n\nexport function improviseHitTest(point, camera: ARCamera): THREE.Vector3 {\n  const { hitTest } = AR.performHitTest(point, ARHitTestResultType.HorizontalPlane);\n\n  if (hitTest.length > 0) {\n    const result = hitTest[0];\n    return positionFromTransform(convertTransformArray(result.worldTransform));\n  } else {\n    // Create a transform with a translation of 0.1 meters (10 cm) in front of the camera\n    const dist = 0.1;\n    const translation = new THREE.Vector3(0, 0, -dist);\n    translation.applyQuaternion(camera.quaternion);\n    return translation;\n  }\n}\n"]}